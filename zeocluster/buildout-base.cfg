# This is a generic buildout profile. Can be used in simple setups
# without any specific needs.
#
# Development environment users may want to use buildout-dev.cfg
# (or buildout-dev-win.cfg): "bin/buildout -c buildout-dev.cfg"
#
# If you are building the prod env, buildout-prod.cfg should be used instead:
# "bin/buildout -c buildout-prod.cfg"

[buildout]
parts =
    PIL
    productdistros
    zopepy
    zeoserver
    client1
    debug-client
    supervisor

extends =
# Plone release version pinnings
    versions-plone.cfg
# Dexterity version pinnings
    versions-dexterity.cfg
# Caching version pinnings
#    versions-caching.cfg
# Custom version pinnings
    versions.cfg
# Copy admin.cfg.tmpl to admin.cfg and specify admin password there
    admin.cfg

versions = versions
admin = admin

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/packages
    http://dist.plone.org/release
    http://dist.plone.org/thirdparty

# Add additional eggs here
eggs =
    Products.PloneHotfix20110531
    Products.Zope_Hotfix_20110622
    Products.PloneHotfix20110928
    Products.PloneHotfix20121106
    Products.PloneHotfix20130618==1.1

#---# IPython
    nose
    pexpect
    ipython

#---# Zope dependencies
    PIL

#---# Plone products
    babble.client
    collective.quickupload
    collective.plonetruegallery
    plone.app.blob
    plone.app.caching
    plone.app.dexterity
    plone.app.discussion
    plone.outputfilters
    Products.AROfficeTransforms
    Products.Carousel
    Products.ClockServer
    Products.ContentWellPortlets
    Products.CMFNotification
    Products.ImageEditor
    Products.LinguaPlone
    Products.OpenXml
    Products.Pakki
    Products.PakkiLayout
    Products.Ploneboard
    Products.PloneboardSubscription
    Products.PloneFormGen
    Products.Poi
    Products.RedirectionTool
    raptus.multilanguageplone
    Solgema.fullcalendar
    webcouturier.dropdownmenu
#---# Plomino and related
    Plomino
    plomino.tinymce

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop =
    src/Products.Pakki
    src/Products.PakkiLayout

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
    plomino.tinymce
    raptus.multilanguageplone
    Solgema.fullcalendar

# ZEO Server
zeo-address = 127.0.0.1:8100
# Zope debug client
debug-client-address = 8078
# Zope client 1
client1-address = 8080

# Disable development stuff by default
debug-mode = off
# Add-on developers should turn deprecation warnings on
deprecation-warnings = off
# change verbose-security to "on" for useful security errors while developing
verbose-security = off

# unzip all eggs for easier debugging
unzip = true


# Python Imaging Library is required but is not always installed for
# Python 2.4. This one makes building PIL a breeze, removing the external
# dependency.
[PIL]
recipe = zc.recipe.egg
egg = PIL==1.1.6
find-links = http://dist.repoze.org


# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
# For options see http://pypi.python.org/pypi/plone.recipe.distros
[productdistros]
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =


# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2zeoserver
[zeoserver]
recipe = plone.recipe.zeoserver
blob-storage = ${buildout:directory}/var/blobstorage
zeo-address = ${buildout:zeo-address}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock
eggs =
    plone.app.blob


[instance-settings]
blob-storage = ${buildout:directory}/var/blobstorage
shared-blob = on
zeo-address = ${zeoserver:zeo-address}
user = ${admin:credentials}
# Change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# Change verbose-security to "on" for detailed security errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}

# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    Plone
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
    ${buildout:zcml}

products =
    ${buildout:directory}/products
    ${productdistros:location}

environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs


# Use this section to install and configure a Zope client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[client1]
recipe = collective.recipe.zope2cluster
instance-clone = instance-settings
zeo-client = true
http-address = ${buildout:client1-address}
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client.pid
lock-file = ${buildout:directory}/var/client1/client.lock

zope-conf-additional =
    <icp-server>
        address ${client1:http-address}
    </icp-server>

    # Recreate secret key regularly once per day
    #%import Products.ClockServer
    <clock-server>
        method /Plone/acl_users/session/manage_createNewSecret
        period 86400
        user ${admin:username}
        password ${admin:password}
        host localhost:${buildout:client1-address}
    </clock-server>


# This recipe installs an additional instance useful for launching a debug
# console that connects to a running ZEO server.
# For options see http://pypi.python.org/pypi/collective.recipe.zope2cluster
# Usage:
#   1) bin/zeoserver start
#   2) bin/client1 start
#   3) bin/debug-client debug
[debug-client]
recipe = collective.recipe.zope2cluster
instance-clone = instance-settings
zeo-client = true
http-address = ${buildout:debug-client-address}
# Put the log, pid, lock files in var/debug-client
event-log = ${buildout:directory}/var/debug-client/event.log
z2-log    = ${buildout:directory}/var/debug-client/Z2.log
pid-file  = ${buildout:directory}/var/debug-client/client.pid
lock-file = ${buildout:directory}/var/debug-client/client.lock


# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
[unifiedinstaller]
recipe = plone.recipe.unifiedinstaller
user = ${admin:credentials}
primary-port = ${client1:http-address}
clients = client1
sudo-command = sudo


# Installs a zopepy python interpreter that runs with your
# full Zope environment
[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${client1:eggs}
interpreter = zopepy
#extra-paths = ${zope2:location}/lib/python
scripts = zopepy


# an IPython Shell for interactive use with zope running.
# You also need to put
# https://svn.plone.org/svn/collective/dotipython/branches/plone4/ipy_profile_zope.py
# in your $HOME/.ipython directory for the following to work.
# You may have to remove an existing ipy_profile_zope.py: if you
# get errors when running ./bin/ipzope, check the stack trace for that
# filename to make sure the correct version is used.
[ipzope]
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance-settings:eggs}
initialization =
    import sys, os
#    os.environ["SOFTWARE_HOME"] = "${zope2:location}/lib/python"
#    os.environ["INSTANCE_HOME"] = "${zope2:location}"
    sys.argv[1:1] = "-p zope".split()
#extra-paths = ${zope2:location}/lib/python
scripts = ipython=ipzope


[supervisor]
recipe = collective.recipe.supervisor
port = 9000
user = ${admin:username}
password = ${admin:password}
serverurl = http://localhost:9000
programs =
    10 zeoserver    ${zeoserver:location}/bin/runzeo                true
    20 client1      ${buildout:directory}/bin/client1    [console]  true

